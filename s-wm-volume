#!/usr/bin/env ruby
# frozen_string_literal: true

require 'ostruct'

# Commands available
class Commands
  attr_reader :manager

  def initialize
    @manager = Managers.new.first { |exec| File.executable?(exec.to_s) }
  end

  def toggle
    manager.toggle
  end

  def mic
    manager.mic
  end

  def up
    manager.up
  end

  def down
    manager.down
  end
end

# List of available sound managers
class Managers
  include Enumerable

  def initialize
    @known = [Pactl.new, Amixer.new, Mixer.new]
  end

  def each(&block)
    @known.each(&block)
  end
end

# pactl - Control a running PulseAudio sound server
class Pactl
  EXEC = '/usr/bin/pactl'
  STEP = 3

  output_id = '@DEFAULT_SINK@'
  output_data = { toggle: "#{EXEC} set-sink-mute #{output_id} toggle",
                  up: "#{EXEC} set-sink-volume #{output_id} +#{STEP}%",
                  down: "#{EXEC} set-sink-volume #{output_id} -#{STEP}%" }
  output = OpenStruct.new(output_data)

  input_id= '@DEFAULT_SOURCE@' 
  input_data = { toggle: "#{EXEC} set-source-mute #{input_id} toggle",
                 up: "#{EXEC} set-source-volume #{input_id} +#{STEP}%",
                 down: "#{EXEC} set-source-volume #{input_id} -#{STEP}%" }
  input = OpenStruct.new(input_data)

  def to_s
    <<~INFO
      exec: #{EXEC}
      sink: #{sink}

      -- spec --

      #{`pactl info`}
    INFO
  end
end

# bsd mixer
class Mixer
  EXEC = '/sbin/mixer'

  def mixer
    {
      name: 'mixer',
      toggle: '',
      updown: "mixer vol #{states[state]}#{STEP}"
    }
  end

  def toggle
    [mixer[:name], mixer[:toggle]].join(' ')
  end

  def updown
    [mixer[:name], mixer[:updown]].join(' ')
  end
end

# Command-line ALSA mixer
class Amixer
  EXEC = '/usr/bin/amixer'

  def amixer
    {
      name: 'amixer',
      toggle: '-q sset Master toggle',
      updown: "set Master #{STEP}%#{states[state]}"
    }
  end

  def toggle
    [amixer[:name], amixer[:toggle]].join(' ')
  end

  def updown
    [amixer[:name], amixer[:updown]].join(' ')
  end
end

# hail to the new king
class Pipewire
  def info
    {
      name: 'pw-cli',
      args: "s #{pipe_id} Props",
      toggle: '{ mute: false, channelVolumes: [ 1.5, 1.5 ] }',
      updown: '{ mute: false, channelVolumes: [ 1.5, 1.5 ] }'
    }
  end

  def id; end

  def toggle
    [info[:name], info[:toggle]].join(' ')
  end

  def updown
    [info[:name], info[:updown]].join(' ')
  end
end

module Cli
  require 'optparse'

  def self.options
    cmds = Commands.new

    OptionParser.new do |opts|
      opts.banner = 'Usage: volume [options]'

      opts.on('-u', '--up', 'Increase volume') do
        system cmds.up
      end

      opts.on('-d', '--down', 'Decrease volume') do
        system cmds.down
      end

      opts.on('-t', '--toggle', 'Toggle volume') do
        system cmds.toggle
      end

      opts.on('-i', '--input', 'Manage input settings') do
        puts cmds.info
      end

      opts.on('-i', '--input', 'Manage input settings') do
        puts cmds.info
      end
    end
  end
end

Cli.options.parse! ['--help'] if ARGV.empty?
Cli.options.parse!
