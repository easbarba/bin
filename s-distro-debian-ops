#!/usr/bin/env bash
#
# Bin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bin. If not, see <https://www.gnu.org/licenses/>.
#

# Debug Options
set -euo pipefail

DEPS=(sudo apt curl python3 go systemctl tee gpasswd)
s-checkdeps "${DEPS[@]}"

INSTALL='sudo apt-get install -yqq'
UPDATE='sudo apt-get update'

if [[ ! -x $(command -v podman) ]]; then
    $INSTALL podman podman-compose

    sudo systemctl enable podman.socket
    sudo systemctl start podman.socket

    # Add a new group called podman so its easier to manage who can run podman w/out sudo
    echo '%podman ALL=(ALL) NOPASSWD: /usr/bin/podman' | sudo tee -a /etc/sudoers.d/podman
fi

if [[ ! -x $(command -v kubectl) ]]; then
    if [[ ! -f /etc/apt/sources.list.d/kubernetes.list ]]; then
        $UPDATE
        $INSTALL apt-transport-https ca-certificates curl
        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    fi

    $UPDATE && $INSTALL kubectl kubelet kubeadm
    sudo systemctl enable kubelet.service
fi

if [[ ! -x $(command -v helm) ]]; then
    wget -qO- https://baltocdn.com/helm/signing.asc | sudo tee /etc/apt/trusted.gpg.d/heml.asc
    sudo apt-get install apt-transport-https --yes
    echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm.list
    sudo apt-get update

    $INSTALL helm
fi

exit

if [[ ! -x $(command -v tcpdump) ]]; then
    $INSTALL net-tools iproute2 telnet dnsutils iwd iw wireless-tools \
        resolvconf dhcpcd5 netcat-traditional tcpdump httpie gnutls-bin nmap
fi

if [[ ! -x $(command -v terraform) ]]; then
    if [[ ! -f /etc/apt/sources.list.d/hashicorp.list ]]; then
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg

        gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint

        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    fi

    $UPDATE && $INSTALL terraform terraform-ls #vagrant vagrant-libvirt #  nomad
fi

[[ ! -x $(command -v aws) ]] && $INSTALL awscli

exit

if [[ ! -x $(command -v minikube) ]]; then
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb -P /tmp
    sudo apt install /tmp/minikube_latest_amd64.deb
fi

[[ ! -x $(command -v qemu-img) ]] && $INSTALL qemu qemu-utils qemu-system-x86 qemu-system-gui qemu-efi qemu-kvm qemu-system

if [[ ! -x $(command -v virt-manager) ]]; then
    $INSTALL libvirt-daemon-system libvirt-clients libvirt-daemon-system virtinst bridge-utils virt-manager

    sudo systemctl start libvirtd
    sudo systemctl enable libvirtd

    sudo usermod -aG libvirt "$USER"
    sudo usermod -aG kvm "$USER"
fi

if [[ ! -x $(command -v gcloud) ]]; then
    if [[ -f /etc/apt/sources.list.d/google-cloud-sdk.list ]]; then
        $INSTALL apt-transport-https ca-certificates gnupg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    fi

    $UPDATE && $INSTALL google-cloud-sdk
fi

[[ ! -x $(command -v gitlab-runner) ]] && $INSTALL gitlab-runner

if [[ ! -x $(command -v ansible) ]]; then
    $INSTALL ansible
    python3 -m pip install cryptography # faster ansible vault encryption
fi

if [[ ! -x $(command -v docker) ]]; then
    if [[ ! -f /etc/apt/sources.list.d/docker.list ]]; then
        # uninstall old versions
        # sudo apt-get remove -y docker docker-engine docker.io containerd runc

        # allow apt to use a repository over HTTPS
        $INSTALL ca-certificates curl gnupg lsb-release

        # Add Dockerâ€™s official GPG key:
        curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        # set up the stable repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
    fi

    $UPDATE
    $INSTALL docker-ce docker-ce-cli containerd.io docker-compose

    sudo systemctl start docker
    sudo systemctl enable docker.service

    sudo groupadd docker
    sudo gpasswd -a "$USER" docker

    sudo systemctl restart docker

    # activate group, for now
    newgrp docker
fi

if [[ ! -x $(command -v jenkins) ]]; then
    curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
        /usr/share/keyrings/jenkins-keyring.asc >/dev/null

    echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
        https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
        /etc/apt/sources.list.d/jenkins.list >/dev/null

    $UPDATE && $INSTALL fontconfig openjdk-11-jre jenkins
fi

if [[ ! -x $(command -v firewalld) ]]; then
    $INSTALL firewalld

    sudo systemctl enable firewalld
    sudo systemctl start firewalld
fi

[[ ! -x $(command -v virtualbox) ]] && $INSTALL virtualbox
